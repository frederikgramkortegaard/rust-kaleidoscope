# Mandelbrot set example from Kaleidoscope tutorial
# Demonstrates recursive functions, nested for loops, and ASCII graphics

extern putchard(char);
extern printd(x);

# Determine whether the specific location diverges.
# Solve for z = z^2 + c in the complex plane.
def mandelconverger(real imag iters creal cimag)
  if iters > 255 then
    iters
  else if real*real + imag*imag > 4 then
    iters
  else
    mandelconverger(real*real - imag*imag + creal,
                    2*real*imag + cimag,
                    iters+1, creal, cimag);

# Return the number of iterations required for the iteration to escape
def mandelconverge(real imag)
  mandelconverger(real, imag, 0, real, imag);

# Print a character based on density (number of iterations)
def printdensity(d)
  if d > 8 then
    putchard(32)  # ' '
  else if d > 4 then
    putchard(46)  # '.'
  else if d > 2 then
    putchard(43)  # '+'
  else
    putchard(42); # '*'

# Newline helper
def printnl()
  putchard(10);

# Helper to print one row
def printrow(xmin xmax xstep y)
  for x = xmin, x < xmax, xstep in
    printdensity(mandelconverge(x,y));

# Compute and plot the mandelbrot set with the specified 2 dimensional range
def mandelhelp(xmin xmax xstep   ymin ymax ystep)
  for y = ymin, y < ymax, ystep in
    printrow(xmin, xmax, xstep, y) + printnl();

# mandel - This is a convenient helper function for plotting the mandelbrot set
# from the specified position with the specified Magnification.
def mandel(realstart imagstart realmag imagmag)
  mandelhelp(realstart, realstart+realmag*78, realmag,
             imagstart, imagstart+imagmag*40, imagmag);

# Plot the mandelbrot set
mandel(0-2.3, 0-1.3, 0.05, 0.07);
